type: edu
files:
- name: editor.py
  visible: true
  text: |-
    class formatter():
        def __init__(self):
            self.user_input = ""
            self.content = []
            self.commands = ["!done", "!help"]
            self.formatters = {"plain": self.plain, "bold": self.bold, "italic": self.italic,
                               "header": self.header, "link": self.link, "inline-code": self.inline_code,
                               "ordered-list": self.ordered_list, "unordered-list": self.unordered_list,
                               "new-line": self.new_line}

        def plain(self):
            self.content.append(input("Text: "))

        def bold(self):
            last_item = self.content.pop()
            user_input = input("Text: ")
            self.content.append(last_item + "**" + user_input + "**")

        def italic(self):
            user_input = input("Text:")
            self.content.append(f"*{user_input}*")

        def header(self):
            while True:
                level = int(input("level: "))
                if level not in range(1, 6):
                    print("The level should be within the range of 1 to 6")
                else:
                    break
            user_input = input("Text: ")
            self.content.append(level * "#" + " " + user_input + "\n")

        def link(self):
            label = input("Label: ")
            user_input = input("URL: ")
            self.content.append(f"[{label}]({user_input})")

        def inline_code(self):
            user_input = input("Text:")
            last_item = self.content.pop()
            self.content.append(last_item + f"`{user_input}`")

        def ordered_list(self):
            while True:
                user_input = int(input("Number of rows: "))
                if user_input <= 0:
                    print("The number of rows should be greater than zero")
                else:
                    break
            temp = ""
            for i in range(1, user_input + 1):
                user_input = input(f"Row #{i}: ")
                temp += f"{i}. {user_input}\n"
            self.content.append(temp)

        def unordered_list(self):
            while True:
                user_input = int(input("Number of rows: "))
                if user_input <= 0:
                    print("The number of rows should be greater than zero")
                else:
                    break
            temp = ""
            for i in range(1, user_input + 1):
                user_input = input(f"Row #{i}: ")
                temp += f"* {user_input}\n"
            self.content.append(temp)

        def new_line(self):
            last_item = self.content.pop()
            self.content.append(last_item + "\n")

        def start(self):
            while True:
                user_input = input("Choose a formatter: ")
                if user_input == "!done":
                    break
                elif user_input == "!help":
                    print(
                        "Available formatters: plain bold italic header link inline-code ordered-list unordered-list new-line")
                    print("Special commands: !help !done")
                elif user_input in self.formatters.keys():
                    formatter_function = self.formatters[user_input]
                    formatted_text = formatter_function()
                    if formatted_text is not None:
                        self.content.append(formatted_text)
                for item in self.content:
                    print(item)

    def main():
        f = formatter()
        f.start()

    if __name__ == "__main__":
        main()
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/tests.py
  visible: false
  text: |-
    from hstest import StageTest, TestedProgram, CheckResult, dynamic_test


    class Test(StageTest):

        answers = [
            '#### Hello World!\n',
            'plain text**bold text**',
            '*italic text*`code.work()`',
            '[google](https://www.google.com)\n',
            '1. first\n2. second\n3. third\n4. fourth\n'
        ]

        def check_result_in_file(self, attach):
            try:
                with open('output.md', 'r') as outfile:
                    output = outfile.read()
                    if output != self.answers[attach]:
                        return CheckResult.wrong('The result written to the output file is wrong.')
            except IOError:
                return CheckResult.wrong('The output file is not found.')
            return CheckResult.correct()


        @dynamic_test
        def test1(self):
            pr = TestedProgram()
            pr.start()

            output = pr.execute('header').strip().lower()
            if 'level' not in output:
                return CheckResult.wrong('Header formatter should prompt a user for both level and text, i.e "- Level: > "')

            output = pr.execute('4').strip().lower()
            if 'text' not in output.strip().lower():
                return CheckResult.wrong('Header formatter should prompt a user for both level and text, i.e "- Text: > "')

            output = list(map(lambda item: item.lower(), pr.execute('Hello World!').split('\n')))
            if len(output) != 3:
                return CheckResult.wrong('Please remember that header formatter switches to a new line automatically')

            if output[0].strip().split() != ['####', 'hello', 'world!']:
                return CheckResult.wrong('Level 4 for header denotes as #### in markdown')

            if output[1]:
                return CheckResult.wrong('Please check whether some redundant data is printed after a header')

            if 'formatter' not in output[2].strip():
                return CheckResult.wrong('A user should be prompted for input again, i.e  "- Choose a formatter: > "')

            pr.execute('!done')
            if not pr.is_finished():
                return CheckResult.wrong('Your program should finish its execution whenever !done is an input')

            return self.check_result_in_file(attach=0)

        @dynamic_test
        def test2(self):
            pr = TestedProgram()
            pr.start()

            output = pr.execute('plain').strip().lower()
            if 'text' not in output.strip().lower():
                return CheckResult.wrong('Plain formatter should prompt a user for text, i.e "- Text: > "')

            output = list(map(lambda item: item.lower(), pr.execute('plain text').split('\n')))
            if len(output) != 2:
                return CheckResult.wrong("Plain formatter should only return the given text as is, and prompt a user for a new formatter")

            if output[0] != 'plain text':
                return CheckResult.wrong('Plain formatter returns the given text as is, without any extra symbols or tags')

            if 'formatter' not in output[1].strip():
                return CheckResult.wrong('A user should be prompted for input again, i.e  "- Choose a formatter: > "')

            output = pr.execute('bold').strip().lower()
            if 'text' not in output:
                return CheckResult.wrong('Bold formatter should prompt a user for text, i.e "- Text: > "')

            output = list(map(lambda item: item.lower(), pr.execute('bold text').split('\n')))
            if len(output) != 2:
                return CheckResult.wrong("Bold formatter should only return the given text enclosed with '**' symbols, and prompt a user for a new formatter")

            if output[0] != 'plain text**bold text**':
                return CheckResult.wrong('Plain formatter returns the given text as is, and does not switch to a new line')

            if 'formatter' not in output[1].strip():
                return CheckResult.wrong('A user should be prompted for input again, i.e  "- Choose a formatter: > "')

            pr.execute('!done')
            if not pr.is_finished():
                return CheckResult.wrong('Your program should finish its execution whenever !done is an input')

            return self.check_result_in_file(attach=1)

        @dynamic_test
        def test3(self):
            pr = TestedProgram()
            pr.start()

            output = pr.execute('italic').strip().lower()
            if 'text' not in output.strip().lower():
                return CheckResult.wrong('Italic formatter should prompt a user for text, i.e "- Text: > "')

            output = list(map(lambda item: item.lower(), pr.execute('italic text').split('\n')))
            if len(output) != 2 or output[0] != '*italic text*':
                return CheckResult.wrong("Bold formatter should only return the given text enclosed with '*' symbols, and prompt a user for a new formatter")

            if 'formatter' not in output[1].strip():
                return CheckResult.wrong('A user should be prompted for input again, i.e  "- Choose a formatter: > "')

            output = pr.execute('inline-code').strip().lower()
            if 'text' not in output:
                return CheckResult.wrong('Inline code formatter should prompt a user for text, i.e "- Text: > "')

            output = list(map(lambda item: item.lower(), pr.execute('code.work()').split('\n')))
            if len(output) != 2:
                return CheckResult.wrong("Inline code formatter should only return the given text enclosed with '`' (backtick) symbols, and prompt a user for a new formatter")

            if output[0] != '*italic text*`code.work()`':
                return CheckResult.wrong('Inline code formatter does not switch to a new line')

            if 'formatter' not in output[1].strip():
                return CheckResult.wrong('A user should be prompted for input again, i.e  "- Choose a formatter: > "')

            pr.execute('!done')
            if not pr.is_finished():
                return CheckResult.wrong('Your program should finish its execution whenever !done is an input')

            return self.check_result_in_file(attach=2)

        @dynamic_test
        def test4(self):
            pr = TestedProgram()
            pr.start()

            output = pr.execute('link').strip().lower()
            if 'label' not in output:
                return CheckResult.wrong('Link formatter should prompt a user for both label and URL, i.e "- Label: > "')

            output = pr.execute('google').strip().lower()
            if 'url' not in output:
                return CheckResult.wrong('Link formatter should prompt a user for both label and URL, i.e "- URL: > "')

            output = list(map(lambda item: item.lower(), pr.execute('https://www.google.com').split('\n')))
            if len(output) != 2:
                return CheckResult.wrong('Link code formatter should only return the given label associated with a URL in the form [Label](URL), and prompt a user for a new formatter')

            if output[0] != '[google](https://www.google.com)':
                return CheckResult.wrong('Please recall that for the given label and URL the correct link formatter return will be [Label](URL)')

            if 'formatter' not in output[1].strip():
                return CheckResult.wrong('A user should be prompted for input again, i.e  "- Choose a formatter: > "')

            output = list(map(lambda item: item.lower(), pr.execute('new-line').split('\n')))
            if len(output) != 3 or output[1] != '':
                return CheckResult.wrong('New-line formatter only moves the input pointer to the next line, and prompts a user for a new formatter')

            if output[0] != '[google](https://www.google.com)':
                return CheckResult.wrong('Please make sure that the markdown state is saved')

            if 'formatter' not in output[2].strip():
                return CheckResult.wrong('A user should be prompted for input again, i.e  "- Choose a formatter: > "')

            pr.execute('!done')
            if not pr.is_finished():
                return CheckResult.wrong('Your program should finish its execution whenever !done is an input')

            return self.check_result_in_file(attach=3)

        @dynamic_test
        def test5(self):
            pr = TestedProgram()
            pr.start()

            output = pr.execute('ordered-list').strip().lower()
            if 'number' not in output:
                return CheckResult.wrong('Ordered list formatter should prompt a user for the number of rows, i.e "- Number of rows: > "')

            output = list(map(lambda item: item.lower(), pr.execute('0').split('\n')))
            if len(output) < 2 or 'number' not in output[-1].strip():
                return CheckResult.wrong('(Un)ordered list formatter should inform a user that the number of rows should be greater than zero if the input was invalid, and prompt the user for this input again, i.e "- Number of rows: > "')

            pr.execute('4')
            pr.execute('first')
            pr.execute('second')
            pr.execute('third')
            output = list(map(lambda item: item.lower(), pr.execute('fourth').split('\n')))
            if len(output) != 6:
                return CheckResult.wrong('Ordered list formatter should switch to a new line automatically')

            if output[0] != '1. first' or output[1] != '2. second' or output[2] != '3. third' or output[3] != '4. fourth':
                return CheckResult.wrong('Ordered list formatter should enumerate its rows in the following manner: "1. ", "2.", and so on, depending on the given number of rows.')

            if 'formatter' not in output[5].strip():
                return CheckResult.wrong('A user should be prompted for input again, i.e  "- Choose a formatter: > "')

            pr.execute('!done')
            if not pr.is_finished():
                return CheckResult.wrong('Your program should finish its execution whenever !done is an input')

            return self.check_result_in_file(attach=4)


    if __name__ == '__main__':
        Test().run_tests()
  learner_created: false
- name: tests.py
  visible: false
  text: |-
    from test.tests import Test

    if __name__ == '__main__':
        Test().run_tests()
  learner_created: false
- name: output.md
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/12317#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Thu, 20 Apr 2023 14:48:35 UTC"
record: -1
